%!PS-Adobe-2.0
%%Title: fig_02.ps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu May 19 13:53:39 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 10.000 def
/userlinewidth gnulinewidth def
/vshift -80 def
/dl {30.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 240 scalefont setfont
1.000 UL
LTb
1224 1030 M
63 0 V
5505 0 R
-63 0 V
stroke
1080 1030 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (-0.4)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1224 2271 M
63 0 V
5505 0 R
-63 0 V
stroke
1080 2271 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.0)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1224 3511 M
63 0 V
5505 0 R
-63 0 V
stroke
1080 3511 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.4)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1224 4752 M
63 0 V
5505 0 R
-63 0 V
stroke
1080 4752 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.8)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1224 720 M
0 63 V
0 3969 R
0 -63 V
stroke
1224 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.4)]
] -80.0 MCshow
grestore
1.000 UL
LTb
2616 720 M
0 63 V
0 3969 R
0 -63 V
stroke
2616 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.5)]
] -80.0 MCshow
grestore
1.000 UL
LTb
4008 720 M
0 63 V
0 3969 R
0 -63 V
stroke
4008 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.6)]
] -80.0 MCshow
grestore
1.000 UL
LTb
5400 720 M
0 63 V
0 3969 R
0 -63 V
stroke
5400 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.7)]
] -80.0 MCshow
grestore
1.000 UL
LTb
6792 720 M
0 63 V
0 3969 R
0 -63 V
stroke
6792 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (0.8)]
] -80.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1224 720 M
5568 0 V
0 4032 V
-5568 0 V
0 -4032 V
LTb
240 2736 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 240.0 0.0 true true 0 (    )]
] -80.0 MCshow
grestore
grestore
LTb
4008 120 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (k)]
[(Helvetica) 192.0 -72.0 true true 0 (S)]
[(Helvetica) 240.0 0.0 true true 0 (/k)]
] -56.0 MCshow
grestore
1.000 UP
LTb
444 2457 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 240.0 0.0 true true 0 (|)]
] -80.0 MCshow
grestore
grestore
LTb
528 2271 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (Q)]
[(Helvetica) 192.0 -72.0 true true 0 (zz)]
] -56.0 MCshow
grestore
1.000 UL
LTb
1406 862 M
0 720 V
3663 0 V
0 -720 V
-3663 0 V
0 720 R
3663 0 V
2.000 UL
LT0
LTb
4142 1402 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (Symmetric anchoring)]
] -80.0 MRshow
grestore
LT0
4286 1402 M
639 0 V
1224 4356 M
56 0 V
56 0 V
57 0 V
56 0 V
56 -1 V
56 0 V
57 -1 V
56 -1 V
56 -1 V
56 -1 V
57 -2 V
56 -2 V
56 -2 V
56 -3 V
57 -3 V
56 -3 V
56 -4 V
56 -4 V
57 -5 V
56 -5 V
56 -6 V
56 -6 V
57 -7 V
56 -8 V
56 -8 V
56 -9 V
57 -9 V
56 -9 V
56 -9 V
56 -8 V
57 -6 V
56 -5 V
56 -4 V
56 -1 V
56 1 V
57 4 V
56 7 V
56 10 V
56 15 V
57 18 V
56 21 V
56 19 V
56 14 V
57 5 V
56 -10 V
56 -22 V
56 -29 V
57 -29 V
56 -22 V
56 -9 V
56 5 V
57 14 V
56 20 V
56 21 V
56 17 V
57 12 V
56 7 V
56 1 V
56 -3 V
57 -8 V
56 -22 V
56 -47 V
56 -86 V
57 -139 V
56 -202 V
56 -260 V
56 -296 V
56 -312 V
57 -309 V
56 -285 V
56 -254 V
56 -221 V
57 -186 V
56 -150 V
56 -111 V
56 -79 V
57 -55 V
56 -38 V
56 -31 V
56 -30 V
57 -31 V
56 -31 V
56 -30 V
56 -27 V
57 -23 V
56 -19 V
56 -16 V
56 -13 V
57 -11 V
56 -9 V
56 -7 V
56 -6 V
57 -5 V
56 -5 V
56 -4 V
56 -4 V
57 -4 V
56 -4 V
56 -3 V
2.000 UL
LT0
1224 4310 M
51 4 V
50 5 V
51 5 V
50 4 V
51 5 V
51 4 V
50 4 V
51 4 V
51 3 V
50 4 V
51 2 V
50 3 V
51 1 V
51 2 V
50 1 V
51 0 V
51 0 V
50 -1 V
51 -2 V
50 -2 V
51 -4 V
51 -4 V
50 -4 V
51 -6 V
50 -7 V
51 -7 V
51 -9 V
50 -9 V
51 -11 V
51 -11 V
50 -11 V
51 -11 V
50 -11 V
51 -10 V
51 -9 V
50 -8 V
51 -7 V
50 -4 V
51 -2 V
51 0 V
50 3 V
51 7 V
51 10 V
50 13 V
51 18 V
50 18 V
51 18 V
51 13 V
50 6 V
51 -2 V
51 -12 V
50 -16 V
51 -16 V
50 -14 V
51 -6 V
51 5 V
50 11 V
51 15 V
50 14 V
51 8 V
51 -1 V
50 -10 V
51 -19 V
51 -23 V
50 -27 V
51 -26 V
50 -24 V
51 -20 V
51 -15 V
50 -9 V
51 -1 V
51 7 V
50 16 V
51 23 V
50 27 V
51 31 V
51 32 V
50 30 V
51 13 V
50 -21 V
51 -70 V
51 -136 V
50 -219 V
51 -295 V
51 -346 V
50 -372 V
51 -371 V
50 -343 V
51 -295 V
51 -245 V
50 -199 V
51 -155 V
50 -116 V
51 -79 V
51 -48 V
50 -22 V
51 -4 V
51 8 V
50 15 V
2.000 UL
LT2
LTb
4142 1042 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (Hybrid anchoring)]
] -80.0 MRshow
grestore
LT2
4286 1042 M
639 0 V
4565 3987 M
14 -43 V
14 -43 V
14 -43 V
14 -44 V
14 -44 V
14 -45 V
14 -45 V
14 -46 V
14 -47 V
14 -48 V
14 -49 V
15 -50 V
14 -51 V
14 -53 V
14 -55 V
14 -56 V
14 -58 V
14 -59 V
14 -62 V
14 -63 V
14 -66 V
14 -68 V
14 -68 V
14 -70 V
14 -71 V
14 -70 V
14 -71 V
14 -70 V
15 -70 V
14 -69 V
14 -67 V
14 -65 V
14 -63 V
14 -60 V
14 -58 V
14 -54 V
14 -51 V
14 -47 V
14 -43 V
14 -37 V
14 -34 V
14 -29 V
14 -24 V
14 -21 V
15 -18 V
14 -15 V
14 -12 V
14 -10 V
14 -7 V
14 -6 V
14 -5 V
14 -3 V
14 -3 V
14 -3 V
14 -3 V
14 -3 V
14 -3 V
14 -5 V
14 -6 V
14 -8 V
14 -10 V
15 -11 V
14 -12 V
14 -14 V
14 -15 V
14 -16 V
14 -17 V
14 -18 V
14 -18 V
14 -19 V
14 -18 V
14 -19 V
14 -19 V
14 -19 V
14 -18 V
14 -18 V
14 -17 V
15 -16 V
14 -15 V
14 -14 V
14 -14 V
14 -12 V
14 -11 V
14 -10 V
14 -9 V
14 -9 V
14 -7 V
14 -7 V
14 -7 V
14 -6 V
14 -5 V
14 -5 V
14 -4 V
14 -4 V
15 -4 V
14 -3 V
14 -4 V
14 -3 V
14 -3 V
2.000 UL
LT2
4565 4226 M
14 -5 V
14 -4 V
14 -4 V
14 -5 V
14 -5 V
14 -4 V
14 -5 V
14 -6 V
14 -5 V
14 -6 V
14 -6 V
15 -6 V
14 -7 V
14 -7 V
14 -8 V
14 -8 V
14 -9 V
14 -9 V
14 -10 V
14 -10 V
14 -11 V
14 -11 V
14 -12 V
14 -12 V
14 -12 V
14 -12 V
14 -12 V
14 -11 V
15 -11 V
14 -10 V
14 -10 V
14 -8 V
14 -8 V
14 -7 V
14 -5 V
14 -4 V
14 -3 V
14 0 V
14 1 V
14 3 V
14 4 V
14 6 V
14 6 V
14 7 V
15 6 V
14 4 V
14 3 V
14 0 V
14 -2 V
14 -6 V
14 -10 V
14 -15 V
14 -21 V
14 -26 V
14 -33 V
14 -40 V
14 -47 V
14 -56 V
14 -65 V
14 -74 V
14 -83 V
15 -92 V
14 -98 V
14 -105 V
14 -111 V
14 -114 V
14 -118 V
14 -121 V
14 -122 V
14 -123 V
14 -122 V
14 -121 V
14 -118 V
14 -116 V
14 -111 V
14 -106 V
14 -99 V
15 -93 V
14 -85 V
14 -76 V
14 -67 V
14 -59 V
14 -50 V
14 -44 V
14 -36 V
14 -30 V
14 -24 V
14 -19 V
14 -13 V
14 -9 V
14 -5 V
14 0 V
14 2 V
14 5 V
15 7 V
14 10 V
14 10 V
14 12 V
14 12 V
4.000 UL
LTa
1224 2271 M
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
56 0 V
57 0 V
56 0 V
56 0 V
2.000 UP
2.000 UL
LT0
1224 4356 TriDF
2616 4285 TriDF
3451 4270 TriDF
3730 4333 TriDF
4008 4219 TriDF
4286 4284 TriDF
4565 4307 TriDF
4843 3945 TriDF
5122 2541 TriDF
5400 1502 TriDF
5678 1214 TriDF
5957 1067 TriDF
6235 987 TriDF
6514 956 TriDF
6792 937 TriDF
2.000 UP
2.000 UL
LT0
1224 4310 TriUF
2616 4311 TriUF
3451 4244 TriUF
3730 4317 TriUF
4008 4251 TriUF
4286 4305 TriUF
4565 4198 TriUF
4843 4131 TriUF
5122 4265 TriUF
5400 3982 TriUF
5678 2135 TriUF
5957 1082 TriUF
6235 995 TriUF
2.000 UP
2.000 UL
LT2
4565 3987 TriDF
4843 2995 TriDF
5122 1759 TriDF
5400 1532 TriDF
5678 1215 TriDF
5957 1077 TriDF
2.000 UP
2.000 UL
LT2
4565 4226 TriUF
4843 4099 TriUF
5122 3940 TriUF
5400 3629 TriUF
5678 1509 TriUF
5957 1151 TriUF
1.000 UL
LTb
1224 720 M
5568 0 V
0 4032 V
-5568 0 V
0 -4032 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
